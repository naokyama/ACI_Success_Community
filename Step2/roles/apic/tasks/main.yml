---
  - name: Pre TASK - cofig backup
    aci_config_snapshot:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      validate_certs: no
      state: present
      export_policy: defaultOneTime
      max_count: 10
      include_secure: yes
      description: Backups taken before new configs are applied.

  - name: TASK 01 - Create TENANT
    aci_tenant:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant: "{{ tenant }}"
      description: "Tenant Created Using Ansible"

  - name: TASK 02 - Create VRF
    aci_vrf:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant: "{{ tenant }}"
      vrf: "{{ vrf }}"
      description: "VRF Created Using Ansible"

  - name: TASK 03 - Create BRIDGE DOMAIN
    aci_bd:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant: "{{ tenant }}"
      bd: "{{ item.bd }}"
      vrf: "{{ vrf }}"
      description: "BD Created Using Ansible"
    with_items: "{{ bds }}"

  - name: TASK 04 - Create BRIDGE DOMAIN SUBNET
    aci_bd_subnet:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant: "{{ tenant }}"
      bd: "{{ item.bd }}"
      gateway: "{{ item.gateway }}"
      mask: 24
    with_items: "{{ bds }}"

  - name: TASK 05 - Create FILTER ENTRIES
    aci_filter:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant: "{{ tenant }}"
      filter: "{{ item }}"
      descr: "Filter Created Using Ansible"
    with_items:
      - "https"
      - "sql"

  - name: TASK 06 - Create FILTERS with FILTER ENTRIES
    aci_filter_entry:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant: "{{ tenant }}"
      filter: "{{ item.filter }}"
      entry: "{{ item.entry }}"
      ether_type: "ip"
      ip_protocol: "tcp"
      dst_port_start: "{{ item.port }}"
      dst_port_end: "{{ item.port }}"
    with_items:
      - filter: "https"
        entry: "https"
        port: 443
      - filter: "sql"
        entry: "sql"
        port: 1433

  - name: TASK 07 - Create CONTRACTS
    aci_contract:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant: "{{ tenant }}"
      contract: "{{ item.contract }}"
      scope: "context"
      description: "Contract Created Using Ansible"
    with_items: "{{ contracts }}"

  - name: TASK 08 - Attach CONTRACTS with CONTRACT SUBJECTS
    aci_contract_subject:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant: "{{ tenant }}"
      contract: "{{ item.contract }}"
      subject: "{{ item.subject }}"
    with_items: "{{ contracts }}"

  - name: TASK 09 -  ASSOCIATE CONTRACTS SUBJECTS with FILTERS
    aci_contract_subject_to_filter:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant_name: "{{ tenant }}"
      contract: "{{ item.contract }}"
      subject: "{{ item.subject }}"
      filter: "{{ item.filter }}"
      log: "log"
    with_items: "{{ contracts }}"

  - name: TASK 09 -  ASSOCIATE CONTRACTS SUBJECTS with FILTERS(ICMP)
    aci_contract_subject_to_filter:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant_name: "{{ tenant }}"
      contract: "{{ item.contract }}"
      subject: "{{ item.subject }}"
      filter: "icmp"
      log: "log"
    with_items: "{{ contracts }}"


  - name: TASK 10 - Create APPLICATION PROFILE
    aci_ap:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant: "{{ tenant }}"
      ap: "{{ ap }}"
      descr: "App Profile Created Using Ansible"

  - name: TASK 11 - Create APPLICATION EPGS
    aci_epg:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant: "{{ tenant }}"
      ap: "{{ ap }}"
      epg: "{{ item.epg }}"
      bd: "{{ item.bd }}"
      description: "EPG Created Using Ansible"
    with_items: "{{ epgs }}"

  - name: Task 12 - BOND EPGs to DOMAIN
    aci_epg_to_domain:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: false
      tenant: "{{ tenant }}"
      ap: "{{ ap }}"
      epg: "{{ item.epg }}"
      domain: "ATX_Physdom"
      domain_type: "phys"
#      vm_provider: "vmware"
      encap_mode: "auto"
#      encap: "{{ item.encap }}"
    with_items: "{{ epgs }}"

  - name: Task 13 - Associate EPGs to CONTRACTS
    aci_epg_to_contract:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      tenant: "{{ tenant }}"
      ap: "{{ ap }}"
      epg: "{{ item.epg }}"
      contract: "{{ item.contract }}"
      contract_type: "{{ item.contract_type }}"
    with_items: "{{ epg_contracts }}"

  - name : Task 14 - EPG Static Path Binding
    aci_static_binding_to_epg:
      host: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"
      state: "present"
      validate_certs: False
      pod_id: "{{ item.pod }}"
      tenant: "{{ tenant }}"
      ap: "{{ ap }}"
      description: "{{ item.ServerName }}"
      epg: "{{ item.epg }}"
      encap_id: "{{ item.encap }}"
      leafs: "{{ item.leaf }}"
      interface:  "{{ item.interface }}"
    with_items: "{{ static_bind }}"